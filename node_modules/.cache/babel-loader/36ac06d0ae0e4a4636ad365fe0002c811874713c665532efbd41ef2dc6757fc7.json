{"ast":null,"code":"const _ = require('lodash');\nconst {\n  COMMANDS\n} = require('../constants');\nconst Logger = require('../logger/Logger');\nconst Schema = require('../schema/Schema');\nconst shortid = require('shortid');\nconst tls = require('tls');\nconst fs = require('fs');\nconst net = require('net');\nconst Connection = require('../connection/Connection.js');\nconst ENV = process.env.NODE_ENV;\nconst isDev = ENV === undefined || ENV === 'development';\nconst server = isDev ? net : tls;\nconst commandsRegexStr = `^(${COMMANDS.join('|')}):? ?(.*)`;\nconst commandsRegex = new RegExp(commandsRegexStr);\nclass Server {\n  constructor(schema, dependencies = {}) {\n    const {\n      serverOptions,\n      ip,\n      port\n    } = this.getOptions(schema);\n    if (!dependencies.logger) {\n      const loggerOptions = _.get(schema, 'logger', {});\n      dependencies.logger = new Logger(loggerOptions);\n    }\n    this.logger = dependencies.logger;\n    this.schema = schema;\n    this.connections = {};\n    this.server = server.createServer(serverOptions, this.createServerHandler.bind(this));\n    this.server.listen(port, ip);\n    this.logger.log(`Server start on ip: ${ip} port: ${port}`);\n  }\n  static factory(schema, dependencies = {}) {\n    return new Server(schema, dependencies);\n  }\n  getOptions(schema = {}) {\n    const key = _.get(schema, 'config.key', '');\n    const cert = _.get(schema, 'config.cert', '');\n    const ip = _.get(schema, 'config.ip', '127.0.0.1');\n    const port = _.get(schema, 'config.port', 1337);\n    return {\n      serverOptions: {\n        key,\n        cert\n      },\n      ip,\n      port\n    };\n  }\n  createServerHandler(socket) {\n    const id = shortid.generate();\n    socket.id = id;\n    const parser = Server.parser;\n    const logger = this.logger;\n    const schema = Schema.factory(this.schema, {\n      logger\n    });\n    const connection = new Connection(socket, {\n      logger,\n      parser,\n      schema\n    });\n    this.connections[id] = connection;\n    socket.on('error', e => {\n      schema.error(e, connection.getMail());\n    });\n    socket.on('close', args => {\n      const id = socket.id || '';\n      this.removeId(id);\n\n      // todo pass connection and mail\n      return schema.done(connection.getMail());\n    });\n  }\n  static parser(line = '') {\n    const parsed = commandsRegex.exec(line);\n    let full = '';\n    let action = '';\n    let params = '';\n    if (parsed && parsed.length) {\n      full = parsed[0], action = parsed[1], params = parsed[2];\n    }\n    return {\n      full,\n      action,\n      params\n    };\n  }\n  getServer() {\n    return this.server;\n  }\n  removeId(id) {\n    delete this.connections[id];\n  }\n\n  /* debugging methods below */\n  send(id, line) {\n    this.connections[id].parse(line);\n  }\n  list() {\n    return Object.keys(this.connections);\n  }\n  getMail(id) {\n    return this.connections[id] && this.connections[id].getMail();\n  }\n  getConnectionCount() {\n    return new Promise((resolve, reject) => {\n      this.server.getConnections((error, count) => {\n        if (error) {\n          // this.logger.fatal(error)\n          return reject(error);\n        }\n        return resolve(count);\n      });\n    });\n  }\n  /* end debugging code */\n}\nmodule.exports = Server;","map":{"version":3,"names":["_","require","COMMANDS","Logger","Schema","shortid","tls","fs","net","Connection","ENV","process","env","NODE_ENV","isDev","undefined","server","commandsRegexStr","join","commandsRegex","RegExp","Server","constructor","schema","dependencies","serverOptions","ip","port","getOptions","logger","loggerOptions","get","connections","createServer","createServerHandler","bind","listen","log","factory","key","cert","socket","id","generate","parser","connection","on","e","error","getMail","args","removeId","done","line","parsed","exec","full","action","params","length","getServer","send","parse","list","Object","keys","getConnectionCount","Promise","resolve","reject","getConnections","count","module","exports"],"sources":["C:/Users/amabr/OneDrive/Bureau/Mielsite/node_modules/smtpjs/src/smtp/server/Server.js"],"sourcesContent":["const _ = require('lodash')\nconst { COMMANDS } = require('../constants')\nconst Logger = require('../logger/Logger')\nconst Schema = require('../schema/Schema')\nconst shortid = require('shortid')\nconst tls = require('tls')\nconst fs = require('fs')\nconst net = require('net')\nconst Connection = require('../connection/Connection.js')\n\nconst ENV = process.env.NODE_ENV\nconst isDev = ENV === undefined || ENV === 'development'\nconst server = isDev? net: tls\nconst commandsRegexStr = `^(${COMMANDS.join('|')}):? ?(.*)`\nconst commandsRegex = new RegExp(commandsRegexStr)\n\nclass Server {\n  constructor (schema, dependencies = {}) {\n    const { serverOptions, ip, port } = this.getOptions(schema)\n\n    if (!dependencies.logger) {\n      const loggerOptions = _.get(schema, 'logger', {})\n      dependencies.logger = new Logger(loggerOptions)\n    }\n\n    this.logger = dependencies.logger\n    this.schema = schema\n    this.connections = {}\n    this.server = server.createServer(serverOptions, this.createServerHandler.bind(this))\n    this.server.listen(port, ip)\n    this.logger.log(`Server start on ip: ${ip} port: ${port}`)\n  }\n\n  static factory (schema, dependencies = {}) {\n    return new Server(schema, dependencies)\n  }\n\n  getOptions (schema = {}) {\n    const key = _.get(schema, 'config.key', '')\n    const cert = _.get(schema, 'config.cert', '')\n    const ip = _.get(schema, 'config.ip', '127.0.0.1')\n    const port = _.get(schema, 'config.port', 1337)\n\n    return {\n      serverOptions: { key, cert },\n      ip,\n      port,\n    }\n  }\n\n  createServerHandler (socket) {\n    const id = shortid.generate()\n    socket.id = id\n    const parser = Server.parser\n    const logger = this.logger\n    const schema = Schema.factory(this.schema, { logger })\n    const connection = new Connection(socket, { logger, parser, schema })\n\n    this.connections[id] = connection\n\n    socket.on('error', (e) => {\n      schema.error(e, connection.getMail())\n    })\n\n    socket.on('close', (args) => {\n      const id = socket.id || ''\n      this.removeId(id)\n\n      // todo pass connection and mail\n      return schema.done(connection.getMail())\n    })\n  }\n\n  static parser (line = '') {\n    const parsed = commandsRegex.exec(line)\n    let full = ''\n    let action = ''\n    let params = ''\n\n    if (parsed && parsed.length) {\n      full = parsed[0],\n      action = parsed[1],\n      params = parsed[2]\n    }\n\n    return {\n      full,\n      action,\n      params,\n    }\n  }\n\n  getServer () {\n    return this.server\n  }\n\n  removeId (id) {\n    delete this.connections[id]\n  }\n\n  /* debugging methods below */\n  send (id, line) {\n    this.connections[id].parse(line)\n  }\n\n  list () {\n    return Object.keys(this.connections)\n  }\n\n  getMail (id) {\n    return this.connections[id] && this.connections[id].getMail()\n  }\n\n  getConnectionCount () {\n    return new Promise((resolve, reject) => {\n      this.server.getConnections((error, count) => {\n        if (error) {\n          // this.logger.fatal(error)\n          return reject(error)\n        }\n\n        return resolve(count)\n      })\n    })\n  }\n  /* end debugging code */\n}\n\nmodule.exports = Server"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}